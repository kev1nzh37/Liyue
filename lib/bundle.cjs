const e=e=>{const t=document.createElement("style");t.setAttribute("type","text/css");const s=document.createTextNode(e);t.appendChild(s),document.head.appendChild(t)},t=e=>{let t="";const s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=s.length;for(let n=0;n<e;n++)t+=s.charAt(Math.floor(Math.random()*r));return t};class s{tree=new Map;wrapperClass=null;constructor(e,t){this.init(e,t),this.tansformCss(),console.log(this.tree)}tansformCss(){const{tree:e,wrapperClass:t}=this;let s=[],r=e.get(t);this.nextCss(r,s);for(let e of s)if(console.log("loop ----------------------------"),null===e.parent)e.renderName=e.id;else{let t="",s=this.tree.get(e.parent);for(console.log(s);s.parent;)t+=s.id,s=this.tree.get(s.parent);e.renderName=t}console.log(s,r)}nextCss(e,t){if(e.children?.length)for(let s of e.children)this.nextCss(this.tree.get(s),t);t.push(e)}init(e,s,r=null){const n=[],o={},c=`${e}__${t(6)}`;Object.keys(s).forEach((e=>{const t=s[e];"string"==typeof t?o[e]=t:n.push(this.init(e,t,c))}));const a={style:o,children:n,parent:r,id:c};return null===r&&(this.wrapperClass=c),this.tree.set(c,a),c}}const r=(e,s,n,o)=>{const c=(e=>e.startsWith("#")?e:`${e}__${t(6)}`)(n),a=`${o||""} .${c}`;Object.keys(s).forEach((t=>{const o=s[t];var l;"object"==typeof o?r(e,o,t,a):(e[c]||(e[c]={cssStr:"",originName:c,renderName:a,selector:n}),e[c].cssStr+=`${l=t,l.replace(/([A-Z])/g,"-$1").toLowerCase()}:${o};`)}))},n=(e,s,r="")=>{Object.keys(s).forEach((o=>{const c=s[o];if("object"==typeof c){n(e,c,`${r}${o}-`)}else{const s={cssStr:c,originName:`--${r}${o}__${t(6)}`};e[o]=s}}))},o=(t,n)=>{const o=((e,t)=>{const s={};return r(s,e,t),s})(n,t);console.log(o);const c=(e=>{let t="";return Object.keys(e).forEach((s=>{const{renderName:r,cssStr:n}=e[s];t+=`${r}{${n}}`})),t})(o),a=(e=>{const t={};return Object.keys(e).forEach((s=>{const{originName:r,selector:n}=e[s];var o;t[(o=n,o.replace(/\-(\w)/g,((e,t)=>t.toUpperCase())))]=r})),1===Object.keys(t).length?t.base:t})(o);return new s(t,n),e(c),a},c=new Map,a=e=>{const t={...e};return Object.keys(t).forEach((e=>{const s=t[e];if("string"==typeof s){const s=c.get(e);t[e]=`var(${s.originName})`}else t[e]=a(s)})),t},l=(t,s)=>{const r=(e=>{const t={};return n(t,e),t})(s),o=((e,t)=>{let s=`${e} {`;return Object.keys(t).forEach((e=>{const r=t[e];c.set(e,r),s+=`${r.originName}:${r.cssStr};`})),s+="}",s})(t,r),l=a(s);return e(o),l};export{l as createVars,o as css};
